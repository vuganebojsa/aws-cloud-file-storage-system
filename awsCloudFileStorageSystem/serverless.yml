
service: awscloudfilestoragesystem
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  profile: serverlessUser
  region: eu-central-1
  stage: dev
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: '*'

functions:
  getFile:
    handler: lambdas/getFile.get_file
    events: 
      - http:
          path: get-file/{bucket}/{filename}
          method: GET
          cors: true
  getFiles:
    handler: lambdas/getFiles.get_files
    events: 
      - http:
          path: get-files/{bucket}/{username}
          method: GET
          cors: true 
  getFolders:
    handler: lambdas/getFolders.get_folders
    events: 
      - http:
          path: get-folders/{username}
          method: GET
          cors: true 
  downloadFile:
    handler: lambdas/downloadFile.download_file
    events: 
      - http:
          path: download_file/{fullpath}
          method: GET
          request:
            passThrought: WHEN_NO_MATCH
          cors: true 
  postFile:
    handler: lambdas/postFile.post_file
    events:
      - http:
          path: post-file/{bucket}/{filename}
          method: POST
          cors: true
          request:
            passThrought: WHEN_NO_MATCH
  postFileToFolder:
    handler: lambdas/postFileToFolder.post_file_to_folder
    events:
      - http:
          path: post-file-to-folder/{bucket}/{filename}
          method: POST
          cors: true
          request:
            passThrought: WHEN_NO_MATCH
  postFileLambda:
    handler: lambdas/postFileDynamo.post_file_dynamo
    events:
      - http:
          path: post-file-lambda/
          method: POST
          cors: true
          request:
            passThrought: WHEN_NO_MATCH
  postFolderLambda:
    handler: lambdas/postFolder.post_folder_dynamo
    events:
      - http:
          path: post-folder-lambda/
          method: POST
          cors: true
          request:
            passThrought: WHEN_NO_MATCH
  postFolderS3:
    handler: lambdas/postFolderS3.post_folder_s3
    events:
      - http:
          path: post-folder-s3/
          method: POST
          cors: true
          request:
            passThrought: WHEN_NO_MATCH
  
  signupUser:
    handler: lambdas/register.register_user
    events:
      - http:
          path: user/signup
          method: POST
          cors: true
  deleteFile:
    handler: lambdas/deleteFile.delete_file
    events:
      - http:
          path: delete-file-from-bucket/{bucket}/{filename}
          method: DELETE
          request:
            passThrought: WHEN_NO_MATCH
          cors: true
  deleteFileDynamo:
    handler: lambdas/deleteFileDynamo.delete_file_dynamo
    events:
      - http:
          path: delete-file-from-dynamo/{bucket}/{username}/{id}
          method: DELETE
          request:
            passThrought: WHEN_NO_MATCH
          cors: true

resources:
  Resources:
    BivujaBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: bivuja-bucket

    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bivuja-table  # Replace with your DynamoDB table name
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDbFolderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: folder-bivuja-table  # Replace with your DynamoDB table name
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: users
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH

